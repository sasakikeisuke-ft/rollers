<% contents_html = make_contents_html(@model, @gemfile) %>
<h1><%= @model.name %>モデル機能の作成 </h1>
<br>
<% if @model.model_type_id != 5 %>
  それでは<%= @model.name %>のファイルを作成します。

  <div class="terminal-field">
    ターミナル：関連ファイルの作成
    rails g model <%= @model.name.classify %>
  </div>
  <br>
  <div class="terminal-field">
    <p>ターミナルに表示されているマイグレーションファイルを対象に行います。</p>
    <p>ターミナル：対象ファイルへジャンプ</p>
    <p>20XXXX...._devise_create_<%= @model.name %> -> command + クリック</p>
  </div>
<% else %>
  Deviseを用いた<%= @model.name %>を作成します。
  <div class="terminal-field">
    <p>ターミナル</p>
    <p>rails g devise:install</p>
    <p>rails g devise:views</p>
    <p>rails g devise <%= @model.name %></p>
  </div>
  <div class="terminal-field">
    <p>ターミナルに表示されているマイグレーションファイルを対象に行います。</p>
    <p>ターミナル：対象ファイルへジャンプ</p>
    <p>20XXXX...._devise_create_<%= @model.name %> -> command + クリック</p>
  </div>
<% end %>
<br><br>
<%# 対象モデルのマイグレーションファイル、モデルファイル、Rspecファイルを記載する。%>
<h2><%= @model.name.tableize %>テーブルのマイグレーションファイルの編集</h2>
<% if @model.model_type.name == '通常モデル' %>
  <div class="migration_file">
    <div class="target">
      ファイル：20XXXX...._devise_create_<%= @model.name %>
    </div>
    <br>
    <div class="code-field">
      class Create<%= @model.name.pluralize.camelize %> < ActiveRecord::Migration[6.0]<br>
      <%= insert_space(2) %>def chande<br>
      <%= insert_space(4) %>create_table :<%= @model.name.tableize %> do |t|<br>
      
      <%# ヘルパーメソッドより作成 %>
      <%== contents_html[:migration_html] %>

      <%# ここからは固定のtimestamps以下 %>
      <%= insert_space(6) %>t.timestamps<br>
      <%= insert_space(4) %>end<br>
      <%= insert_space(2) %>end<br>
      end<br>
    </div>
  </div>
<% elsif @model.model_type.name == 'devise' %>
  <%== contents_html[:migration_html] %>
    上記を必要な箇所に挿入<br>
<% end %>
<br>

<p>マイグレーションを実行します</p>
<div class="terminal-field">
  ターミナル<br>
  rails db:migrate<br>
</div><br>


<%# ここからモデルのコードを表示する %>
<h2><%= @model.name.classify %>モデルのモデルファイルの編集</h2>
<div class="terminal-field">
  ターミナル：対象ファイルへジャンプ<br>
  code app/models/<%= @model.name %>.rb
</div>
<br>


<div class="code-field">
  class <%= @model.name.classify %> < ApplicationRecord<br>
  
  <%# Deviseのみ対象の専用記述 %>
  <% if @model.model_type_id == 5 %>
    <%= insert_space(2) %># Include default devise modules. Others available are:<br>
    <%= insert_space(2) %># :confirmable, :lockable, :timeoutable, :trackable and :omniauthable<br>
    <%= insert_space(2) %>devise :database_authenticatable, :registerable,<br>
    <%= insert_space(9) %>:recoverable, :rememberable, :validatable<br>
    <br>
    # パスワードを英数字混合に制限します。不要であれば削除してください。<br>
    <%= insert_space(2) %>PASSWORD_REGEX = /\A(?=.*?[a-z])(?=.*?\d)[a-z\d]+\z/i.freeze<br>
    <%= insert_space(2) %>validates_format_of :password, with: PASSWORD_REGEX, message: 
    <%= "'は英字と数字の両方を含む必要があります'" if @gemfile.rails_i18n %>
    <%= "'should contain both letters and numbers.'" unless @gemfile.rails_i18n %>
    <br><br>
  <% end %>
  <%#/ Deviseのみ対象の専用記述 %>

  <%# バリデーションに関する記述 %>
  <div class="validation">
    <%# ヘルパーメソッドによりバリデーションに関するHTMLを作成 %>
    <%== contents_html[:validation_html] %>
  </div>


  <div class="association">
    <%# ヘルパーメソッドによりbelongs_toに関連するHTMLを作成 %>
    <%==contents_html[:belongs_to_html] %>

    <%# ヘルパーメソッドによりhasのアソシエーションに関するHTMLを作成 %>
    <%== make_has(@columns, @model) %>

    <%# ImageMagickを使用する場合のアソシエーションを記載 %>
    <%= insert_space(2) + "has_one_attached :image" if @model.attached_image %><br>

    <%# ActiveHashに関するアソシエーションをヘルパーメソッドにより作成 %>
    <%== contents_html[:activehash_html] %>

  </div> <%#/association %>
  end<br> <%# モデルファイルの記載の終了 %>
</div>
<br>
<br>
<h2><%= @model.name.classify %>モデルのRSpecの編集</h2>


<div class="terminal-field">
  ターミナル
  rails g rspec:model <%= @model.name.classify %>
</div>


<div class="code-field">
  FactoryBot.define do<br>
  <%== insert_space(2) %>factory :<%= @model.name %> do
  
  <%# contents_html[:factorybot_html] %>
  <%# contents_html[:association_html] %>
  <%== insert_space(4) %>nickname {Faker::Name.last_name}<br>
  ＜ここにカラムごとのFakerとassociationが記載される＞<br>
  
  <% if @model.model_type_id == 5 %>
  <%== insert_space(4) %>email {Faker::Internet.free_email}<br>
  <%== insert_space(4) %>password {Faker::Internet.password(min_length: 6)}<br>
  <%== insert_space(4) %>password_confirmation {password}<br>
  <% end %>
  <%== insert_space(2) %>end<br>
  end<br>
</div><%# code-field %>
<br>
<div class="code-field">
  <--コードの基準点<br>
  require 'rails_helper'<br>
  RSpec.describe <%= @model.name.classify %>, type: :model do<br>
  <%# FactoryBotを使用 %>
  <%== insert_space(2) %>before do<br>
  <%== insert_space(4) %>@<%= @model.name %> = FactoryBot.build(:<%= @model.name %>)<br>
  <%== insert_space(4) %>sleep 0.1 # エラーを防ぐために休止時間を入れています。不要なら削除してください。<br>
  <%== insert_space(2) %>end<br>
  <br>
  <%# テストコードの記載 %>
  <%== insert_space(2) %>describe '<%= @model.name.classify %>モデルの登録機能', type: :model do<br>
  <%# 正常系の記載 %>
  <%== insert_space(4) %>context '入力内容が適切であれば登録できる' do<br>
  <%== insert_space(6) %>it '入力内容が全て適切であれば登録できる' do<br>
  <%== insert_space(8) %>expect(@<%= @model.name %>).to be_valid<br>
  <%== insert_space(6) %>end<br>
  <br><br>
  
  <%# ヘルパーメソッドにより正常系のテスト内容を記載 %>
  <%# contents_html[:nomal_examples_html] %>

      it '入力内容が全て適切であれば登録できる' do<br>
        @bot名.カラム名 = '変更内容'<br>
        expect(@bot名).to be_valid<br>
      end<br>
  上記はカラム後に変更する内容<br>
  下記はdevise専用。今は表示しておく<br>
  <%# if @model.model_type_id == 5 %>
    <%== insert_space(6) %>it 'passwordが英数字混合の6文字であれば登録できる' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = 'a12345'<br>
    <%== insert_space(8) %>@<%= @model.name %>.password_confirmation = @<%= @model.name %>.password<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>).to be_valid<br>
    <%== insert_space(6) %>end<br>
  <%# end %>
  <%== insert_space(4) %>end<br> <%# 正常系の記載終了 %>
  <%# 異常系の記載 %>
  <%== insert_space(4) %>context '不適切な内容があり登録できない' do<br>
  <%== insert_space(6) %>it 'カラム名が空欄だと登録できない' do<br>
  <%== insert_space(8) %>@bot名.カラム名 = ''<br>
  <%== insert_space(8) %>@bot名.valid?<br>
  <%== insert_space(8) %>expect(@bot名.errors.full_messages).to include("カラム名 can't be blank")<br>
  <%== insert_space(6) %>end<br>
  上記はカラムごとに記載する内容<br>
  <br>








  
  下記はdevise専用。今は表示しておく<br>
  <%# if @model.model_type_id == 5 && !@gemfile.rails_i18n %><%# エラー文：日本語 未完成 %>
    <%== insert_space(6) %>it 'emailが空欄だと登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.email = ''<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include("Eメールを入力してください")<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it 'emailに@が含まれていない場合、登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.email = 'abcdefgh'<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include('Eメール is invalid')<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it 'emailの重複があり登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.save<br>
    <%== insert_space(8) %>another_<%= @model.name %> = FactoryBot.build(:<%= @model.name %>, email: @<%= @model.name %>.email)<br>
    <%== insert_space(8) %>another_<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(another_<%= @model.name %>.errors.full_messages).to include("Eメールはすでに存在します")<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it 'passwordが空欄だと登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = ''<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include("パスワードを入力してください")<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it 'passwordとpassword_confirmationが不一致では登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = 'abcdef'<br>
    <%== insert_space(8) %>@<%= @model.name %>.password_confirmation = 'ghijkl'<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include("パスワード（確認用）とパスワードの入力が一致しません")<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it '5文字以下の場合、登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = '1abcd'<br>
    <%== insert_space(8) %>@<%= @model.name %>.password_confirmation = @<%= @model.name %>.password<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include('パスワードは6文字以上で入力してください')<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it '全角文字では登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = 'ひらがなカタカナ漢字'<br>
    <%== insert_space(8) %>@<%= @model.name %>.password_confirmation = @<%= @model.name %>.password<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include('パスワード is invalid. Include both letters and numbers')<br>
    <%== insert_space(6) %>end<br>
  <%# elsif @model.model_type_id == 5 %><%# エラー文：英語 %>
    <%== insert_space(6) %>it 'emailが空欄だと登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.email = ''<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include("Email can't be blank")<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it 'emailに@が含まれていない場合、登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.email = 'abcdefgh'<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include('Email is invalid')<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it 'emailの重複があり登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.save<br>
    <%== insert_space(8) %>another_<%= @model.name %> = FactoryBot.build(:<%= @model.name %>, email: @<%= @model.name %>.email)<br>
    <%== insert_space(8) %>another_<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(another_<%= @model.name %>.errors.full_messages).to include("Email has already been taken")<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it 'passwordが空欄だと登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = ''<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include("password can't be blank")<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it 'passwordとpassword_confirmationが不一致では登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = 'abcdef'<br>
    <%== insert_space(8) %>@<%= @model.name %>.password_confirmation = 'ghijkl'<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include("Password confirmation doesn't match password")<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it '5文字以下の場合、登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = '1abcd'<br>
    <%== insert_space(8) %>@<%= @model.name %>.password_confirmation = @<%= @model.name %>.password<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include('password is too short (minimum is 6 characters)')<br>
    <%== insert_space(6) %>end<br>
    <%== insert_space(6) %>it '全角文字では登録できない' do<br>
    <%== insert_space(8) %>@<%= @model.name %>.password = 'ひらがなカタカナ漢字'<br>
    <%== insert_space(8) %>@<%= @model.name %>.password_confirmation = @<%= @model.name %>.password<br>
    <%== insert_space(8) %>@<%= @model.name %>.valid?<br>
    <%== insert_space(8) %>expect(@<%= @model.name %>.errors.full_messages).to include('password is invalid. Include both letters and numbers')<br>
    <%== insert_space(6) %>end<br>
  <%# end %>


<br>
      it 'カラム名_idが空欄だと登録できない' do
        @bot名.カラム名_id = ''
        @bot名.valid?
        expect(@bot名.errors.full_messages).to include("カラム名 can't be blank")
      end
      it 'カラム名_idが未選択だと登録できない' do
        @bot名.カラム名_id = 0
        @bot名.valid?
        expect(@bot名.errors.full_messages).to include("カラム名 can't be blank").
      end

      it 'userが紐付けされていないと登録できない' do
        @bot名.user = nil
        @bot名.valid?
        expect(@bot名.errors.full_messages).to include('User must exist')
      end

      it "tokenが空では登録できないこと" do
        @bot名.token = nil
        @bot名.valid?
        expect(@bot名.errors.full_messages).to include("Token can't be blank")
      end

      it '内容詳細' do
      end

  <br>
  <br>
  <%== insert_space(4) %>end<br>
  <%== insert_space(2) %>end<br>
  end<br>


</div>
<%# そのほかメモ
references型のカラムの登録時には、オプションを飛ばしちゃっていいかも。オプションはforeign_key: trueで固定なので

この後の追加実装予定
・Rspec
・日本語化用のファイル。ファイル自体は別の場所で作成予定
・Formオブジェクトパターン、同時に二つのモデルに保存するやつ。一応同じ感じに表示したいが用途が違いすぎるか？。
%>
