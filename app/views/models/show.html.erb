<% contents_html = make_contents_html(@model, @gemfile) %>
<h1><%= @model.name %>モデル機能の作成 </h1>
<br>
<% if @model.model_type_id != 5 %>
  それでは<%= @model.name %>のファイルを作成します。

  <div class="terminal-field">
    ターミナル：関連ファイルの作成
    rails g model <%= @model.name.classify %>
  </div>
  <br>
  <div class="terminal-field">
    <p>ターミナルに表示されているマイグレーションファイルを対象に行います。</p>
    <p>ターミナル：対象ファイルへジャンプ</p>
    <p>20XXXX...._devise_create_<%= @model.name %> -> command + クリック</p>
  </div>
<% else %>
  Deviseを用いた<%= @model.name %>を作成します。
  <div class="terminal-field">
    <p>ターミナル</p>
    <p>rails g devise:install</p>
    <p>rails g devise:views</p>
    <p>rails g devise <%= @model.name %></p>
  </div>
  <div class="terminal-field">
    <p>ターミナルに表示されているマイグレーションファイルを対象に行います。</p>
    <p>ターミナル：対象ファイルへジャンプ</p>
    <p>20XXXX...._devise_create_<%= @model.name %> -> command + クリック</p>
  </div>
<% end %>
<br><br>
<%# 対象モデルのマイグレーションファイル、モデルファイル、Rspecファイルを記載する。%>
<h2><%= @model.name.tableize %>テーブルのマイグレーションファイルの編集</h2>
<% if @model.model_type.name == '通常モデル' %>
  <div class="migration_file">
    <div class="target">
      ファイル：20XXXX...._devise_create_<%= @model.name %>
    </div>
    <br>
    <div class="code-field">
      class Create<%= @model.name.pluralize.camelize %> < ActiveRecord::Migration[6.0]<br>
      <%= insert_space(2) %>def chande<br>
      <%= insert_space(4) %>create_table :<%= @model.name.tableize %> do |t|<br>
      
      <%# ヘルパーメソッドより作成 %>
      <%== contents_html[:migration_html] %>

      <%# ここからは固定のtimestamps以下 %>
      <%= insert_space(6) %>t.timestamps<br>
      <%= insert_space(4) %>end<br>
      <%= insert_space(2) %>end<br>
      end<br>
    </div>
  </div>
<% elsif @model.model_type.name == 'devise' %>
  <%== contents_html[:migration_html] %>
    上記を必要な箇所に挿入<br>
<% end %>
<br>

<p>マイグレーションを実行します</p>
<div class="terminal-field">
  ターミナル<br>
  rails db:migrate<br>
</div><br>


<%# ここからモデルのコードを表示する %>
<h2><%= @model.name.capitalize %>モデルのモデルファイルの編集</h2>
<div class="terminal-code">
  ターミナル：対象ファイルへジャンプ<br>
  code app/models/<%= @model.name %>.rb
</div>
<br>


<div class="model">
  class <%= @model.name.classify %> < ApplicationRecord<br>
  
  <%# Deviseのみ対象の専用記述 %>
  <% if @model.model_type_id == 5 %>
    <%= insert_space(2) %># Include default devise modules. Others available are:<br>
    <%= insert_space(2) %># :confirmable, :lockable, :timeoutable, :trackable and :omniauthable<br>
    <%= insert_space(2) %>devise :database_authenticatable, :registerable,<br>
    <%= insert_space(9) %>:recoverable, :rememberable, :validatable<br>
    <br>
    # パスワードを英数字混合に制限します。不要であれば削除してください。<br>
    <%= insert_space(2) %>PASSWORD_REGEX = /\A(?=.*?[a-z])(?=.*?\d)[a-z\d]+\z/i.freeze<br>
    <%= insert_space(2) %>validates_format_of :password, with: PASSWORD_REGEX, message: 
    <%= "'は英字と数字の両方を含む必要があります'" if @gemfile.rails_i18n %>
    <%= "'should contain both letters and numbers.'" unless @gemfile.rails_i18n %>
    <br><br>
  <% end %>
  <%#/ Deviseのみ対象の専用記述 %>

  <%# バリデーションに関する記述 %>
  <div class="validation">
    <%# ヘルパーメソッドによりバリデーションに関するHTMLを作成 %>
    <%== contents_html[:validation_html] %>
  </div>


  <div class="association">
    <%# ヘルパーメソッドによりbelongs_toに関連するHTMLを作成 %>
    <%==contents_html[:belongs_to_html] %>

    <%# has_many/oneの記述を行う。%>
    <%# 当モデルと同名のカラムを持つ=アソシエーションを組んでいるモデルを探し出す %>
    <% @columns.each do |column| %>
      <% if column.name == @model.name && @model.not_only %>
        <%= insert_space(2) %>has_many :<%= column.model.name %><br>
      <% elsif column.name == @model.name %>
        <%= insert_space(2) %>has_one :<%= column.model.name %><br>
      <% end %>
    <% end %>

    <%# ImageMagickを使用する場合のアソシエーションを記載 %>
    <%= insert_space(2) + "has_one_attached :image" if @gemfile.image_magick %><br>

    <%# ActiveHashに関するアソシエーションをヘルパーメソッドにより作成 %>
    <%== contents_html[:activehash_html] %>

  </div> <%#/association %>
  end<br> <%# モデルファイルの記載の終了 %>
</div>


<div class="terminal-field">
    ターミナル
    rails g model <%= @model.name.classify %>
  </div>


<%# そのほかメモ
references型のカラムの登録時には、オプションを飛ばしちゃっていいかも。オプションはforeign_key: trueで固定なので

この後の追加実装予定
・Rspec
・日本語化用のファイル。ファイル自体は別の場所で作成予定
・Formオブジェクトパターン、同時に二つのモデルに保存するやつ。一応同じ感じに表示したいが用途が違いすぎるか？。
%>
